import logging
import traceback
import asyncio
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import FSInputFile
from aiogram.exceptions import TelegramRetryAfter
from config.settings import GIF_FOLDER
from utils.gif_rotator import GifRotator
from pathlib import Path

logger = logging.getLogger(__name__)
router = Router()
gif_rotator = GifRotator(GIF_FOLDER)


def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="‚≠ê –†–µ–π—Ç–∏–Ω–≥"))
    builder.add(types.KeyboardButton(text="üÜò –ü–æ–º–æ—â—å"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


def get_rating_keyboard():
    builder = ReplyKeyboardBuilder()
    for i in range(11):
        builder.add(types.KeyboardButton(text=str(i)))
    builder.adjust(5)
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)


@router.message(Command("start"))
async def start_handler(message: types.Message):
    try:
        user_name = message.from_user.first_name
        gif_path = gif_rotator.get_next_gif()

        if not Path(gif_path).exists():
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {gif_path}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–∏—Ñ–∫—É
        await message.answer_animation(FSInputFile(gif_path))

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 2 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(2)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
    except TelegramRetryAfter as e:
        logger.warning(f"Flood Control: {e}")
        await message.answer(f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {e.retry_after} —Å–µ–∫—É–Ω–¥.")
    except FileNotFoundError as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await message.answer("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –≥–∏—Ñ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

@router.message(lambda message: message.text == "‚≠ê –†–µ–π—Ç–∏–Ω–≥")
async def rating_handler(message: types.Message):
    await message.answer("–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—Å –æ—Ç 0 –¥–æ 10:", reply_markup=get_rating_keyboard())

@router.message(lambda message: message.text.isdigit() and 0 <= int(message.text) <= 10)
async def process_rating(message: types.Message):
    rating = message.text
    await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {rating}!", reply_markup=get_main_keyboard())

@router.message(lambda message: message.text == "üÜò –ü–æ–º–æ—â—å")
async def help_handler(message: types.Message):
    await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @support")

@router.message()
async def unknown_message(message: types.Message):
    await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")
