import logging
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import FSInputFile
from config.settings import GIF_FOLDER
from utils.gif_rotator import GifRotator
from utils.gif_processor import add_weather_to_gif
from services.weather import get_weather

logger = logging.getLogger(__name__)
router = Router()
gif_rotator = GifRotator(GIF_FOLDER)


def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    buttons = [
        "‚≠ê –û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—Å",
        "üì¢ –í–∞–∫–∞–Ω—Å–∏–∏",
        "üåê –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç",
        "üìû –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π",
        "üìñ –†–µ—Ü–µ–ø—Ç—ã",
        "üéÅ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–Ω—è",
        "üÜò –ü–æ–º–æ—â—å"
    ]
    for text in buttons:
        builder.add(types.KeyboardButton(text=text))
    builder.adjust(2, 2, 2)
    return builder.as_markup(resize_keyboard=True)


def get_rating_keyboard():
    builder = ReplyKeyboardBuilder()
    for i in range(11):
        builder.add(types.KeyboardButton(text=str(i)))
    builder.adjust(5)
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)


@router.message(Command("start"))
async def start_handler(message: types.Message):
    try:
        user = message.from_user
        full_name = f"**{user.first_name} {user.last_name}**" if user.last_name else f"**{user.first_name}**"

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–∏—Ñ–∫–∏ —Å –ø–æ–≥–æ–¥–æ–π
        gif_path = gif_rotator.get_next_gif()
        output_path = "temp/with_weather.gif"
        weather_data = get_weather()
        if "error" in weather_data:
            raise RuntimeError(weather_data["error"])

        add_weather_to_gif(gif_path, output_path, weather_data)

        await message.answer_animation(
            FSInputFile(output_path),
            caption=f"üõí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!",
            parse_mode="Markdown"
        )
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤–º–µ—Å—Ç–æ –ø—Ä–æ–±–µ–ª–∞
        await message.answer(
            text="\u2063",  # –ù–µ–≤–∏–¥–∏–º—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (INVISIBLE SEPARATOR)
            reply_markup=get_main_keyboard()
        )
    except FileNotFoundError:
        logger.error("–§–∞–π–ª –≥–∏—Ñ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await message.answer("üö® –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –≥–∏—Ñ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except RuntimeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        await message.answer("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–∏—Ñ–∫–∏.")
    except Exception:
        logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", exc_info=True)
        await message.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.")


@router.message(lambda message: message.text == "‚≠ê –û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—Å")
async def rating_handler(message: types.Message):
    await message.answer("–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—Å –æ—Ç 0 –¥–æ 10:", reply_markup=get_rating_keyboard())


@router.message(lambda message: message.text == "üì¢ –í–∞–∫–∞–Ω—Å–∏–∏")
async def vacancies_handler(message: types.Message):
    await message.answer("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üõ†Ô∏è")


@router.message(lambda message: message.text == "üåê –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç")
async def website_handler(message: types.Message):
    await message.answer("–°–∞–π—Ç: https://www.x5.ru")


@router.message(lambda message: message.text == "üìû –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π")
async def admin_handler(message: types.Message):
    await message.answer("–¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX")


@router.message(lambda message: message.text == "üìñ –†–µ—Ü–µ–ø—Ç—ã")
async def recipes_handler(message: types.Message):
    await message.answer("–†–µ—Ü–µ–ø—Ç—ã —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è! üìñ")


@router.message(lambda message: message.text == "üéÅ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–Ω—è")
async def daily_offer_handler(message: types.Message):
    await message.answer("–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ! üéÅ")


@router.message(lambda message: message.text == "üÜò –ü–æ–º–æ—â—å")
async def help_handler(message: types.Message):
    await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @support")


@router.message(lambda message: message.text.isdigit() and 0 <= int(message.text) <= 10)
async def process_rating(message: types.Message):
    rating = message.text
    await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {rating}!", reply_markup=get_main_keyboard())


@router.message()
async def unknown_message(message: types.Message):
    await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")
