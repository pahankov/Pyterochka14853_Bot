import logging
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import FSInputFile
from pathlib import Path
import asyncio
from config.settings import GIF_FOLDER
from utils.gif_rotator import GifRotator
from utils.gif_processor import add_weather_to_gif
from services.weather import get_weather
from .keyboards import get_main_keyboard, get_rating_keyboard, get_vacancy_keyboard

logger = logging.getLogger(__name__)
router = Router()
gif_rotator = GifRotator(GIF_FOLDER)


@router.message(Command("start"))
async def start_handler(message: types.Message):
    try:
        Path("temp").mkdir(exist_ok=True)
        user = message.from_user
        full_name = f"{user.first_name} {user.last_name}" if user.last_name else user.first_name

        gif_path = gif_rotator.get_next_gif()
        output_path = "temp/weather.gif"
        weather_data = get_weather()

        if "error" in weather_data:
            raise RuntimeError(weather_data["error"])

        add_weather_to_gif(gif_path, output_path, weather_data)

        await message.answer_animation(FSInputFile(output_path))
        await asyncio.sleep(1)

        await message.answer(
            text=f"**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!** üõí\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="Markdown",
            reply_markup=get_main_keyboard()
        )

    except FileNotFoundError as e:
        logger.error(f"FileNotFoundError: {str(e)}", exc_info=True)
        await message.answer("üö® –§–∞–π–ª –≥–∏—Ñ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except RuntimeError as e:
        logger.error(f"RuntimeError: {str(e)}", exc_info=True)
        await message.answer("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}", exc_info=True)
        await message.answer("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.")


@router.message(lambda message: message.text == "‚≠ê –û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—Å")
async def rating_handler(message: types.Message):
    await message.answer(
        "–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—Å –æ—Ç 0 –¥–æ 10:",
        reply_markup=get_rating_keyboard()
    )


@router.message(lambda message: message.text == "üì¢ –í–∞–∫–∞–Ω—Å–∏–∏")
async def vacancies_handler(message: types.Message):
    await message.answer(
        "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ—Ç, "
        "–Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–æ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –¥—Ä—É–≥–∏—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö.",
        reply_markup=get_vacancy_keyboard()
    )


@router.message(lambda message: message.text == "üåê –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç")
async def website_handler(message: types.Message):
    await message.answer("–°–∞–π—Ç: https://www.x5.ru")


@router.message(lambda message: message.text == "üìû –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π")
async def admin_handler(message: types.Message):
    await message.answer("–¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX")


@router.message(lambda message: message.text == "üìñ –†–µ—Ü–µ–ø—Ç—ã")
async def recipes_handler(message: types.Message):
    await message.answer(
        "üç¥ **–¢–æ–ø —Ä–µ—Ü–µ–ø—Ç–æ–≤ –Ω–µ–¥–µ–ª–∏:**\n"
        "1. –°–∞–ª–∞—Ç '–¶–µ–∑–∞—Ä—å'\n"
        "2. –ü–∞—Å—Ç–∞ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞\n"
        "3. –¢–∏—Ä–∞–º–∏—Å—É",
        parse_mode="Markdown"
    )


@router.message(lambda message: message.text == "üéÅ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–Ω—è")
async def daily_offer_handler(message: types.Message):
    try:
        await message.answer_photo(
            photo="https://example.com/daily_offer.jpg",
            caption="üî• **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–Ω—è!** –°–∫–∏–¥–∫–∞ 30% –Ω–∞ –≤—ã–ø–µ—á–∫—É!",
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {str(e)}", exc_info=True)
        await message.answer("üö® –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")


@router.message(lambda message: message.text == "üÜò –ü–æ–º–æ—â—å")
async def help_handler(message: types.Message):
    await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @support")


@router.message()
async def unknown_message(message: types.Message):
    await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")