import logging
import traceback
import asyncio
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import FSInputFile
from config.settings import GIF_FOLDER
from utils.gif_rotator import GifRotator
from utils.gif_processor import add_weather_widget
from services.weather import get_weather
from pathlib import Path

logger = logging.getLogger(__name__)
router = Router()
gif_rotator = GifRotator(GIF_FOLDER)


def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="‚≠ê –†–µ–π—Ç–∏–Ω–≥"))
    builder.add(types.KeyboardButton(text="üÜò –ü–æ–º–æ—â—å"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


def get_rating_keyboard():
    builder = ReplyKeyboardBuilder()
    for i in range(11):
        builder.add(types.KeyboardButton(text=str(i)))
    builder.adjust(5)
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)


@router.message(Command("start"))
async def start_handler(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
        weather_data = get_weather()
        if "error" in weather_data:
            raise RuntimeError(weather_data["error"])

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–∏—Ñ–∫—É —Å –≤–∏–¥–∂–µ—Ç–æ–º –ø–æ–≥–æ–¥—ã
        gif_path = gif_rotator.get_next_gif()
        output_path = "temp/with_weather.gif"
        add_weather_widget(gif_path, output_path, weather_data)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–∏—Ñ–∫—É
        await message.answer_animation(FSInputFile(output_path))

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è Flood Control
        await asyncio.sleep(1)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {traceback.format_exc()}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...

@router.message(lambda message: message.text == "‚≠ê –†–µ–π—Ç–∏–Ω–≥")
async def rating_handler(message: types.Message):
    await message.answer("–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—Å –æ—Ç 0 –¥–æ 10:", reply_markup=get_rating_keyboard())

@router.message(lambda message: message.text.isdigit() and 0 <= int(message.text) <= 10)
async def process_rating(message: types.Message):
    rating = message.text
    await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {rating}!", reply_markup=get_main_keyboard())

@router.message(lambda message: message.text == "üÜò –ü–æ–º–æ—â—å")
async def help_handler(message: types.Message):
    await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @support")

@router.message()
async def unknown_message(message: types.Message):
    await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")
