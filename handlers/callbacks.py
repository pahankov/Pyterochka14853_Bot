from aiogram import Router, types
from aiogram.filters import Filter
from aiogram.exceptions import TelegramBadRequest  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
from server.server_logger import setup_logger
from handlers.keyboards import get_rating_keyboard
router = Router()
logger = setup_logger("callbacks")  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
class TextFilter(Filter):
    def __init__(self, text: str):
        self.text = text

    async def __call__(self, callback: types.CallbackQuery) -> bool:
        return callback.data == self.text

@router.callback_query(TextFilter("help"))
async def handle_help(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer("üìö –°–ø—Ä–∞–≤–∫–∞: https://example.com/help")

@router.callback_query(TextFilter("contact"))
async def handle_contact(callback: types.CallbackQuery):
    try:
        await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É
        await callback.message.answer("üìû –¢–µ–ª–µ—Ñ–æ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏: +7 (XXX) XXX-XX-XX")
    except TelegramBadRequest as e:
        if "query is too old" in str(e):
            logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–æ–ª–±—ç–∫: contact")
        else:
            raise



@router.callback_query(TextFilter("rate"))
async def handle_rate(callback: types.CallbackQuery):
    try:
        await callback.answer()
        await callback.message.answer(
            "–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à —Å–µ—Ä–≤–∏—Å:",
            reply_markup=get_rating_keyboard()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
    except TelegramBadRequest as e:
        logger.warning(f"–û—à–∏–±–∫–∞: {str(e)}")
